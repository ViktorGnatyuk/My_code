const token = "...";
const apiKey = '...';
const webAppUrl = "...";



const fetch = (url, options) => UrlFetchApp.fetch(url, options);

const CUSTOM_KEYBOARD = {
  "keyboard": [
    [{ "text": "–ü—Ä–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é" }, { "text": "–ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏" }]
  ],
  "resize_keyboard": true,
};

const CUSTOM_KEYBOARD1 = {
  "keyboard": [
    [{ "text": "AI" }]
  ],
  "resize_keyboard": true,
};

function setWebhook() {
  try {
    let response = fetch(`https://api.telegram.org/bot${token}/setWebhook?url=${webAppUrl}`);
    Logger.log(response.getContentText());
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ webhook:', error);
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook.');
  }
}

async function generateGPT3Response(prompt, maxTokens) {
  try {
    console.log('Calling GPT-3.5 API with prompt:', prompt, 'and maxTokens:', maxTokens);

    const response = await fetch('https://api.openai.com/v1/engines/davinci/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        prompt,
        max_tokens: maxTokens
      })
    });

    if (!response.ok) {
      throw new Error(`Failed to call GPT-3.5 API: ${response.statusText}`);
    }

    const data = await response.json();
    console.log('Response from GPT-3.5 API:', data.choices[0].text.trim());
    return data.choices[0].text.trim();
  } catch (error) {
    console.error('Error calling GPT-3.5 API:', error);
    throw new Error('Failed to generate GPT-3.5 response.');
  }
}

function sendText(chat_id, text, keyBoard) {
  console.log('Sending message with chat_id:', chat_id, 'text:', text, 'keyboard:', keyBoard);

  let data = {
    method: "post",
    payload: {
      method: "sendMessage",
      chat_id: String(chat_id),
      text: text,
      parse_mode: "HTML",
      reply_markup: JSON.stringify(keyBoard),
    }
  };
  
  fetch(`https://api.telegram.org/bot${token}/sendMessage`, data);
}

function doPost(e) {
  try {
    let contents = JSON.parse(e.postData.contents);
    let chat_id = contents.message.chat.id;
    let text = contents.message.text;

    if (text === "/start") {
      sendText(chat_id, "–ü—Ä–∏–≤—ñ—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–Ω–æ–ø–∫–∏ –æ–±–µ—Ä–∏, —è–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å! üëá", CUSTOM_KEYBOARD);
    } else if (text === "–ü—Ä–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é") {
      sendText(chat_id, "–ö—Ä–∞—â–µ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è 1 —Ç—ñ–ª—å–∫–∏ –Ω–µ–±–æ!", CUSTOM_KEYBOARD);
    } else if (text === "–ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏") {
      sendText(chat_id, "–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è 1 –Ω–∞–π–∫—Ä–∞—â–∞!", CUSTOM_KEYBOARD);
    } else {
      const gpt3Response = generateGPT3Response(text, 50);
      console.log('GPT-3.5 Response:', gpt3Response);
      sendText(chat_id, gpt3Response, CUSTOM_KEYBOARD1);
    }
  } catch (error) {
    console.error('Error handling request:', error.message);
  }
}
